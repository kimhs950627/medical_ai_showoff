{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceType":"competition","sourceId":13451,"datasetId":654585,"databundleVersionId":1188070},{"sourceType":"datasetVersion","sourceId":7923692,"datasetId":4616374,"databundleVersionId":8031839},{"sourceType":"datasetVersion","sourceId":4800870,"datasetId":2727590,"databundleVersionId":4864291},{"sourceType":"datasetVersion","sourceId":58333,"datasetId":38326,"databundleVersionId":60763},{"sourceType":"datasetVersion","sourceId":4729375,"datasetId":2683088,"databundleVersionId":4792279},{"sourceType":"datasetVersion","sourceId":1950595,"datasetId":1164135,"databundleVersionId":1989350},{"sourceType":"kernelVersion","sourceId":169421886},{"sourceType":"kernelVersion","sourceId":176022044}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport random\nimport pydicom\n\nfrom sklearn.manifold import TSNE\nimport re\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nseed = 2024\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# ML tools \n\nimport tensorflow as tf\nimport keras #; keras.config.set_dtype_policy(\"mixed_float16\")\nimport keras_cv\nimport keras_nlp\n\nimport cv2\nfrom skimage.io import imread\nkeras.utils.set_random_seed(seed)\nimport tensorflow_io as tfio\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow_datasets as tfds\nimport tensorflow_probability as tfp\nimport tensorflow_decision_forests as tfdf\n\nprint(f\"Tensorflow version : {tf.__version__}\")\ntry:\n    print(f\"Keras version : {keras.__version__}\")\nexcept:\n    pass\n\nfrom keras import Input, Model, ops\nfrom keras.models import load_model\n\nfrom keras.layers import Conv2D, DepthwiseConv2D, Dense, Activation, BatchNormalization, LayerNormalization, MultiHeadAttention, Embedding, Subtract, Add, Multiply, GlobalAveragePooling2D, GlobalAveragePooling1D, LayerNormalization\nfrom keras.utils import load_img, img_to_array\nfrom keras.applications import *\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\nfrom tqdm.notebook import tqdm\nimport wandb\nfrom wandb.keras import WandbCallback, WandbModelCheckpoint, WandbMetricsLogger\ndef wandb_config():\n    from kaggle_secrets import UserSecretsClient\n    user_secrets = UserSecretsClient()\n    try:\n        secret_value_0 = user_secrets.get_secret(\"__gcloud_sdk_auth__\")\n        secret_value_1 = user_secrets.get_secret(\"huggingface_key\")\n        secret_value_2 = user_secrets.get_secret(\"wandb_key\")\n        !wandb login $secret_value_2\n    except:\n        secret_value_0 = user_secrets.get_secret(\"huggingface_key\")\n        secret_value_1 = user_secrets.get_secret(\"wandb_key\")\n        !wandb login $secret_value_1\n    \n\nres = int(1.0*256)\nsmall_res = 64\nbatch_size = 16\nembed_dims = 768\nn_multicrop = 4\n\ndef auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        tpu = False\n        strategy = tf.distribute.MirroredStrategy() # for GPU or multi-GPU machines\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return tpu, strategy\n\ntpu, strategy = auto_select_accelerator()\nbatch_size = strategy.num_replicas_in_sync * batch_size\nprint('batch size', batch_size)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-07T08:05:56.380873Z","iopub.execute_input":"2024-05-07T08:05:56.381536Z","iopub.status.idle":"2024-05-07T08:06:17.547665Z","shell.execute_reply.started":"2024-05-07T08:05:56.381502Z","shell.execute_reply":"2024-05-07T08:06:17.546717Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-05-07 08:05:59.188943: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-07 08:05:59.189077: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-07 08:05:59.303649: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Tensorflow version : 2.15.0\nKeras version : 3.2.1\nRunning on 1 replicas\nbatch size 16\n","output_type":"stream"}]},{"cell_type":"code","source":"import ssl_module\nfrom ssl_module import get_map_fn, get_gcvit_configs, get_flops, att_visualize, get_full_model, AttentionPooling, BarlowModel, VICRegModel, Moco, SimSiam, CLIP, SigLIP\nimport nas_ftp_module\nfrom nas_ftp_module import upload_file, download_file","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:17.549723Z","iopub.execute_input":"2024-05-07T08:06:17.549984Z","iopub.status.idle":"2024-05-07T08:06:17.652127Z","shell.execute_reply.started":"2024-05-07T08:06:17.549962Z","shell.execute_reply":"2024-05-07T08:06:17.651196Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirements loaded, keras : v3.2.1, Tensorflow : v2.15.0\nRandAug Component in this SSL module :  ['equalization', 'solarization', 'random_color_degeneration', 'random_contrast', 'random_brightness', 'random_shear', 'random_shear_1', 'random_translation', 'random_translation_1', 'grid_mask']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data import (with Generator)\n- 목적 : CXR의 prior knowledge를 SwAV으로 feature map generator에 주입시키기\n- Bounding box의 information을 사용하지 않음 + External data를 사용하자","metadata":{}},{"cell_type":"code","source":"metainfo_dir = \"/kaggle/input/chexdet-image-and-annotations/ChestXDet_Metainformations/ChestX-Det-Dataset-main\"\ntrain_det_dir = \"/kaggle/input/chexdet-image-and-annotations/train_data/train\"\nval_det_dir = \"/kaggle/input/chexdet-image-and-annotations/test_data/test\"\n\ndf_det_train = pd.read_json(\"/kaggle/input/chexdet-image-and-annotations/ChestXDet_Metainformations/ChestX-Det-Dataset-main/ChestX_Det_train.json\")\ndf_det_train[\"file_name\"] = [os.path.join(train_det_dir, fname) for fname in df_det_train.file_name.values]\ndf_det_train = df_det_train.loc[:, [\"file_name\"]]\n\ndf_val = pd.read_json(\"/kaggle/input/chexdet-image-and-annotations/ChestXDet_Metainformations/ChestX-Det-Dataset-main/ChestX_Det_test.json\")\ndf_val[\"file_name\"] = [os.path.join(val_det_dir, fname) for fname in df_val.file_name.values]\ndf_val_cxr = df_val.loc[:, [\"file_name\"]]\n\n#\next_dir = \"/kaggle/input/vinbigdata-chest-xray-original-png/train\"\ndict_ext = {\"file_name\" : [os.path.join(ext_dir, fname) for fname in os.listdir(ext_dir)] }\ndf_ext = pd.DataFrame(dict_ext)\ndf_train_cxr = pd.concat([df_det_train, df_ext], axis = 0)\nprint(f\"Total training cases for CXR : {len(df_train_cxr)} cases, Validation case : {len(df_val_cxr)} case\")","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-07T08:06:17.653117Z","iopub.execute_input":"2024-05-07T08:06:17.653363Z","iopub.status.idle":"2024-05-07T08:06:18.475842Z","shell.execute_reply.started":"2024-05-07T08:06:17.653341Z","shell.execute_reply":"2024-05-07T08:06:18.474851Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Total training cases for CXR : 18025 cases, Validation case : 553 case\n","output_type":"stream"}]},{"cell_type":"markdown","source":"> Deeplesion metainformation dataframe 생성","metadata":{}},{"cell_type":"code","source":"ct_fname = []\nbase_img_dir = '/kaggle/input/nih-deeplesion-subset/minideeplesion'\nfor dirname, _, filenames in tqdm(os.walk(base_img_dir)):\n    for filename in filenames:\n        ct_fname.append(os.path.join(dirname, filename))\n        \ndf_ct_whole = pd.DataFrame({\"file_name\" : ct_fname})\n\ndf_ct_train, df_ct_val = train_test_split(df_ct_whole, \n                                         test_size = 134,\n                                         random_state = seed)\nprint(f\"Total training cases of Chest/Abdomen CT : {len(df_ct_train)} cases, Validation case : {len(df_ct_val)} case\")","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:18.476930Z","iopub.execute_input":"2024-05-07T08:06:18.477289Z","iopub.status.idle":"2024-05-07T08:06:32.057119Z","shell.execute_reply.started":"2024-05-07T08:06:18.477264Z","shell.execute_reply":"2024-05-07T08:06:32.056232Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"0it [00:00, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d0197b1d11bb4f4091ebf2791eccbbb2"}},"metadata":{}},{"name":"stdout","text":"Total training cases of Chest/Abdomen CT : 33200 cases, Validation case : 134 case\n","output_type":"stream"}]},{"cell_type":"markdown","source":"> import RSNA ICH dataset metainformation dataframe","metadata":{}},{"cell_type":"code","source":"dicom_dir = \"/kaggle/input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_train\"\ndf_train_brainct = pd.read_csv(\"/kaggle/input/rsna-ich-detection-metadata/df_train_split.csv\")\ndf_val_brainct = pd.read_csv(\"/kaggle/input/rsna-ich-detection-metadata/df_val_splt.csv\").head(300)\n\nfor df in [df_train_brainct, df_val_brainct]:\n    df[\"file_name\"] = [os.path.join(dicom_dir, fname + \".dcm\") for fname in df['SOPInstanceUID']]\n    \nprint(f\"Total training cases of Brain, NonCE CT : {len(df_train_brainct)} cases, Validation case : {len(df_val_brainct)} case\")","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:32.060053Z","iopub.execute_input":"2024-05-07T08:06:32.060359Z","iopub.status.idle":"2024-05-07T08:06:32.215009Z","shell.execute_reply.started":"2024-05-07T08:06:32.060334Z","shell.execute_reply":"2024-05-07T08:06:32.214092Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Total training cases of Brain, NonCE CT : 32000 cases, Validation case : 300 case\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train = pd.concat([df_ct_train, df_train_cxr, df_train_brainct], axis = 0, join='inner')\ndf_val = pd.concat([df_val_cxr, df_ct_val, df_val_brainct], axis = 0, join='inner')\n\ndf_train.to_csv(\"df_train_ER_SSL.csv\", index = False)\ndf_val.to_csv(\"df_val_ER_SSL.csv\", index = False)\n\ndf_train.sample(10)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:32.216177Z","iopub.execute_input":"2024-05-07T08:06:32.216532Z","iopub.status.idle":"2024-05-07T08:06:32.640225Z","shell.execute_reply.started":"2024-05-07T08:06:32.216505Z","shell.execute_reply":"2024-05-07T08:06:32.639196Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                                               file_name\n27863  /kaggle/input/rsna-intracranial-hemorrhage-det...\n1222   /kaggle/input/nih-deeplesion-subset/minideeple...\n12077  /kaggle/input/nih-deeplesion-subset/minideeple...\n25883  /kaggle/input/nih-deeplesion-subset/minideeple...\n11373  /kaggle/input/vinbigdata-chest-xray-original-p...\n13095  /kaggle/input/vinbigdata-chest-xray-original-p...\n2090   /kaggle/input/nih-deeplesion-subset/minideeple...\n10721  /kaggle/input/vinbigdata-chest-xray-original-p...\n1321   /kaggle/input/chexdet-image-and-annotations/tr...\n30151  /kaggle/input/rsna-intracranial-hemorrhage-det...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>27863</th>\n      <td>/kaggle/input/rsna-intracranial-hemorrhage-det...</td>\n    </tr>\n    <tr>\n      <th>1222</th>\n      <td>/kaggle/input/nih-deeplesion-subset/minideeple...</td>\n    </tr>\n    <tr>\n      <th>12077</th>\n      <td>/kaggle/input/nih-deeplesion-subset/minideeple...</td>\n    </tr>\n    <tr>\n      <th>25883</th>\n      <td>/kaggle/input/nih-deeplesion-subset/minideeple...</td>\n    </tr>\n    <tr>\n      <th>11373</th>\n      <td>/kaggle/input/vinbigdata-chest-xray-original-p...</td>\n    </tr>\n    <tr>\n      <th>13095</th>\n      <td>/kaggle/input/vinbigdata-chest-xray-original-p...</td>\n    </tr>\n    <tr>\n      <th>2090</th>\n      <td>/kaggle/input/nih-deeplesion-subset/minideeple...</td>\n    </tr>\n    <tr>\n      <th>10721</th>\n      <td>/kaggle/input/vinbigdata-chest-xray-original-p...</td>\n    </tr>\n    <tr>\n      <th>1321</th>\n      <td>/kaggle/input/chexdet-image-and-annotations/tr...</td>\n    </tr>\n    <tr>\n      <th>30151</th>\n      <td>/kaggle/input/rsna-intracranial-hemorrhage-det...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Building Dataloader in keras-3 style\n- Merging 2 kinds of dataset : original files with pd dataframe and tfrecord\n    - using this [tf dataset method](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#sample_from_datasets)\n    - [reference code](https://www.kaggle.com/code/calebeverett/combining-dataset-examples#Sample)","metadata":{}},{"cell_type":"markdown","source":"# Original Files with dataframe\n- using keras.utils.Sequence","metadata":{}},{"cell_type":"code","source":"class ImageDataLoader(keras.utils.Sequence):\n    def __init__(self, dataframe, x_col, res, batch_size, y_col = None, shuffle = True):\n        self.df = dataframe\n        self.x_col = x_col ; self.y_col = y_col\n        self.res = res\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        self.on_epoch_end()\n    def dicom_to_tensor(self, dicom_path):\n        dataset = pydicom.dcmread(dicom_path)\n        tensor = np.array(dataset.pixel_array)\n        slope = dataset.RescaleSlope   # dicom header (Rescale slope)\n        intercept = dataset.RescaleIntercept   # dicom header (Rescale intercept)\n        center = dataset.WindowCenter   # dicom header (Window center)\n        width = dataset.WindowWidth   # dicom header (Window width)\n\n        if(type(dataset.WindowCenter) == pydicom.multival.MultiValue):\n                center = float(dataset.WindowCenter[0])\n                width = float(dataset.WindowWidth[0])       \n        else:    \n                center = float(dataset.WindowCenter)\n                width = float(dataset.WindowWidth)\n\n        tensor = slope*tensor + intercept\n        lbound, ubound = center - 0.5*width, center + 0.5*width\n        tensor[np.where(tensor < lbound)] = lbound\n        tensor[np.where(tensor > ubound)] = ubound\n        tensor = tf.image.resize(tensor[:,:,tf.newaxis], [self.res,self.res],\n                                antialias = True) #HU unit\n        if tf.shape(tensor)[-1] == 1 :#gray\n            tensor = tf.image.grayscale_to_rgb(tensor)\n            \n        tensor = (tensor - tf.reduce_min(tensor)) / (tf.reduce_max(tensor) - tf.reduce_min(tensor) + 1e-4) #HU unit to Uint8\n        tensor = tensor*255.0\n        try:\n            del dataset\n        except:\n            pass\n        #print(f\"Dicom tensor shape : {ops.shape(tensor)}\")\n        return tensor\n    \n    def image_to_tensor(self, path):\n        if path.split(\".\")[-1] == \"dcm\":\n            return self.dicom_to_tensor(path)\n        \n        if \"minideeplesion\" in str(path).split(\"/\"):\n            image = imread(path).astype(np.float32)-32768\n            image = image[..., tf.newaxis]\n            image = tf.image.resize(image, [self.res, self.res],\n                                   antialias = True)\n            #print(f\"deepLesion tensor shape : {ops.shape(image)}\")\n            image = tf.clip_by_value(image, -750.0, 700.0)\n            image = (image - tf.reduce_min(image))/(tf.reduce_max(image) - tf.reduce_min(image) + 1e-3)\n            image = image * 255.0\n            \n        else:           \n            image = load_img(path, target_size = [self.res, self.res])\n            image = img_to_array(image)\n            #print(f\"other tensor shape : {ops.shape(image)}\")\n        if tf.shape(image)[-1] == 1 :#gray\n            image = tf.image.grayscale_to_rgb(image)\n            #image = np.array(image)\n            \n\n        return image\n        \n    def on_epoch_end(self):\n        self.indexes = np.arange(len(self.df))\n        if self.shuffle:\n            np.random.shuffle(self.indexes)\n            \n    def __len__(self):\n        return int(np.floor(len(self.df) / self.batch_size))\n    \n    def __data_generation(self, img_name):\n        ## path를 받아 img화 및 token화 하여 실제로 Feeding할 데이터를 반환\n        X = []\n        for i, fname in enumerate(img_name):\n            img = self.image_to_tensor(fname)\n            img = tf.convert_to_tensor(img)\n            img = tf.cast(img, tf.uint8)\n            X.append(img)\n        \n        return X\n        \n                \n    def __getitem__(self, index):\n        indexes = self.indexes[index * self.batch_size : (index + 1) * self.batch_size]\n        \n        img_name = [self.df.iloc[k].loc[self.x_col] for k in indexes]\n        \n        X = self.__data_generation(img_name)\n        #X = np.array(X).reshape([-1, self.res, self.res, 3])\n        return X\n    \ndef get_train_gen():\n    return ImageDataLoader(df_train, x_col = \"file_name\",\n                         res = res, batch_size = batch_size)\n\ndef get_val_gen():\n    return ImageDataLoader(df_val, x_col = \"file_name\",\n                         res = res, batch_size = batch_size)\n\n\ntrain_ds = tf.data.Dataset.from_generator(get_train_gen, (tf.uint8), output_shapes = (batch_size, res, res,3) ).ignore_errors().prefetch(tf.data.AUTOTUNE).repeat()\nval_ds = tf.data.Dataset.from_generator(get_val_gen, (tf.uint8), output_shapes = (batch_size, res, res,3) ).ignore_errors().prefetch(tf.data.AUTOTUNE).repeat()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-07T08:06:32.642095Z","iopub.execute_input":"2024-05-07T08:06:32.642424Z","iopub.status.idle":"2024-05-07T08:06:32.740126Z","shell.execute_reply.started":"2024-05-07T08:06:32.642396Z","shell.execute_reply":"2024-05-07T08:06:32.739349Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"# Spinal X-ray dataset in TFrecords","metadata":{}},{"cell_type":"code","source":"#spinal xray dataset\n\nlabel_map = {0: 'Disc space narrowing', 1: 'Foraminal stenosis', 2: 'No finding', 3: 'Osteophytes', 4: 'Other lesions', 5: 'Spondylolysthesis', 6: 'Surgical implant', 7: 'Vertebral collapse'}\n\nlabels = list(label_map.values())\nlabels.sort()\nn_labels = len(label_map)\n\n\ndef deserialize_example(serialized_string, train = True):\n    image_feature_description = {\n            'image': tf.io.FixedLenFeature([], tf.string),\n            'label': tf.io.FixedLenFeature([], tf.string)\n        }\n    parsed_record = tf.io.parse_single_example(serialized_string, image_feature_description)\n    image = tf.io.parse_tensor(parsed_record[\"image\"], tf.float32)\n    image = (image - tf.reduce_min(image))/(tf.reduce_max(image)-tf.reduce_min(image)+1e-4)\n    image = image * 255.0\n    image = tf.cast(image, tf.uint8)\n    image = ops.reshape(image, [res, res, 3])\n    label = tf.io.decode_raw(parsed_record['label'], tf.int32)\n    label = ops.reshape(label, [n_labels,])\n    return image, label\n    \ndef load_dataset(filenames):\n    ignore_order = tf.data.Options()\n    ignore_order.experimental_deterministic = False # disable order, increase speed\n    dataset = tf.data.TFRecordDataset(filenames, compression_type = \"GZIP\", \n                                      num_parallel_reads=tf.data.AUTOTUNE) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(deserialize_example, num_parallel_calls=tf.data.AUTOTUNE)\n    return dataset\n\noriginal_train_ds = load_dataset(\"/kaggle/input/tfrecords-vindr-spinexr-tfrecords/train_gzip_384.tfrecord\")\noriginal_val_ds = load_dataset(\"/kaggle/input/tfrecords-vindr-spinexr-tfrecords/val_gzip_384.tfrecord\")\n\nspine_train_ds = original_train_ds.batch(batch_size, drop_remainder = True).map(lambda x,y:x).ignore_errors().repeat().prefetch(tf.data.AUTOTUNE)\nspine_val_ds = original_val_ds.batch(batch_size, drop_remainder = True).map(lambda x,y:x).ignore_errors().repeat().prefetch(tf.data.AUTOTUNE)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-07T08:06:32.741443Z","iopub.execute_input":"2024-05-07T08:06:32.741822Z","iopub.status.idle":"2024-05-07T08:06:33.144893Z","shell.execute_reply.started":"2024-05-07T08:06:32.741784Z","shell.execute_reply":"2024-05-07T08:06:33.143954Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"# Merging 2 dataset","metadata":{}},{"cell_type":"code","source":"merged_train_ds = tf.data.Dataset.sample_from_datasets([train_ds.unbatch(), spine_train_ds.unbatch()], weights = [0.5, 0.5]).batch(batch_size).ignore_errors().repeat().prefetch(tf.data.AUTOTUNE)\nmerged_val_ds = tf.data.Dataset.sample_from_datasets([val_ds.unbatch(), spine_val_ds.unbatch()], weights = [0.5, 0.5]).batch(batch_size).ignore_errors().repeat().prefetch(tf.data.AUTOTUNE)","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-07T08:06:33.146242Z","iopub.execute_input":"2024-05-07T08:06:33.146940Z","iopub.status.idle":"2024-05-07T08:06:34.945705Z","shell.execute_reply.started":"2024-05-07T08:06:33.146908Z","shell.execute_reply":"2024-05-07T08:06:34.944656Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"> calculating train and validation steps per epoch\n\n- Spinal dataset : [여기 참고](https://www.kaggle.com/code/khsmdjjys/self-supervised-learning-with-tfrecord)","metadata":{}},{"cell_type":"code","source":"train_1 = len(df_train) ; val_1 = len(df_val)\ntrain_2 = 8389 ; val_2 = 2077\n\ntrain_steps = (train_1 + train_2)//batch_size\nval_steps = (val_1 + val_2)//batch_size\n\nprint(f\"Total Train cases, Val cases : {train_1 + train_2, val_1 + val_2}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:34.947010Z","iopub.execute_input":"2024-05-07T08:06:34.947638Z","iopub.status.idle":"2024-05-07T08:06:34.953312Z","shell.execute_reply.started":"2024-05-07T08:06:34.947603Z","shell.execute_reply":"2024-05-07T08:06:34.952424Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Total Train cases, Val cases : (91614, 3064)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Applying SSL functions\n- A. Basic function : return 2 global views (g=2)\n- B. SwAV-like strategy : return 2 global views + additional local views (l = 4)\n- Use get_map_fn in SSL module:\n> parameters of get_map_fn:\n    - res = image resolution, \n    - input_type = \"without_label\" or \"supervised\"\n    - output_type = \"ssl\" or \"ssl_with_label\"\n    - n_view = HOW MANY VIEWS? -> n_view >= 3일 때, 첫번째 이미지와 두 번째 이미지는 비교적 global information을 담고, 나머지 이미지는 local image (가로/세로 1/2)임.","metadata":{}},{"cell_type":"code","source":"multiview_fn = get_map_fn(res = res, input_type = \"without_label\", output_type = \"ssl\",\n                         n_view = n_multicrop)\ntwo_view_fn = get_map_fn(res = res, input_type = \"without_label\", output_type = \"ssl\",\n                         n_view = 2)\n\ntrain_ds = merged_train_ds.unbatch().map(two_view_fn, num_parallel_calls=tf.data.AUTOTUNE).batch(batch_size).ignore_errors().prefetch(tf.data.AUTOTUNE)\nval_ds = merged_val_ds.unbatch().map(two_view_fn, num_parallel_calls=tf.data.AUTOTUNE).batch(batch_size).ignore_errors().prefetch(tf.data.AUTOTUNE)\ntrain_ds_multiview = merged_train_ds.unbatch().map(multiview_fn, num_parallel_calls=tf.data.AUTOTUNE).batch(batch_size).ignore_errors().prefetch(tf.data.AUTOTUNE)\nval_ds_multiview = merged_val_ds.unbatch().map(multiview_fn, num_parallel_calls=tf.data.AUTOTUNE).batch(batch_size).ignore_errors().prefetch(tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:34.954636Z","iopub.execute_input":"2024-05-07T08:06:34.955040Z","iopub.status.idle":"2024-05-07T08:06:46.435912Z","shell.execute_reply.started":"2024-05-07T08:06:34.954992Z","shell.execute_reply":"2024-05-07T08:06:46.435094Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"for imgs in val_ds_multiview.take(1):\n    images = imgs\nsample_img = images[0]\ntest_set = tuple([comp[:2] for comp in images])","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:06:46.437017Z","iopub.execute_input":"2024-05-07T08:06:46.437288Z","iopub.status.idle":"2024-05-07T08:07:06.956781Z","shell.execute_reply.started":"2024-05-07T08:06:46.437265Z","shell.execute_reply":"2024-05-07T08:07:06.955985Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"> Curate the dataset","metadata":{}},{"cell_type":"code","source":"view_curation = False","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:06.957858Z","iopub.execute_input":"2024-05-07T08:07:06.958125Z","iopub.status.idle":"2024-05-07T08:07:06.962497Z","shell.execute_reply.started":"2024-05-07T08:07:06.958103Z","shell.execute_reply":"2024-05-07T08:07:06.961450Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"if view_curation:\n    print(\"Training dataset Curation, with Basic SSL Fn (2 global views)\")\n    for originals, augs in train_ds.take(1):\n        for origin, aug in zip(originals, augs):\n            fig, axes = plt.subplots(1,2, figsize = (16, 8))\n            axes = axes.flatten()\n            axes[0].imshow(ops.cast(origin, \"uint8\"))\n            axes[1].imshow(ops.cast(aug, \"uint8\"))\n            axes[0].set_title(\"ORIGINAL\")\n            axes[1].set_title(\"GLOBAL VIEW AUGMENTATION\")\n            plt.show()\n\n    print(\"Validation dataset Curation, with Basic SSL Fn (2 global views)\")\n    for originals, augs in val_ds.take(1):\n        for origin, aug in zip(originals, augs):\n            fig, axes = plt.subplots(1,2, figsize = (16, 8))\n            axes = axes.flatten()\n            axes[0].imshow(ops.cast(origin, \"uint8\"))\n            axes[1].imshow(ops.cast(aug, \"uint8\"))\n            axes[0].set_title(\"ORIGINAL\")\n            axes[1].set_title(\"GLOBAL VIEW AUGMENTATION\")\n            plt.show()","metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-05-07T08:07:06.966753Z","iopub.execute_input":"2024-05-07T08:07:06.966993Z","iopub.status.idle":"2024-05-07T08:07:06.978939Z","shell.execute_reply.started":"2024-05-07T08:07:06.966973Z","shell.execute_reply":"2024-05-07T08:07:06.978080Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"if view_curation:\n    for multiset in train_ds_multiview.take(1):\n        global_views = multiset[:2]\n        local_views = multiset[2:]\n    for idx in tqdm(range(batch_size)):\n        print(f\"=================\\nBatch No.{idx}\\n===================\")\n        print(\"Global Views\")\n        fig, axes = plt.subplots(1,2, figsize = (20,10))\n        axes = axes.flatten()\n        g1, g2 = global_views[0][idx], global_views[1][idx] \n        axes[0].imshow(ops.cast(ops.squeeze(g1), \"uint8\"))\n        axes[1].imshow(ops.cast(ops.squeeze(g2), \"uint8\"))\n        plt.show()\n        print(\"=================\\nLocal Views\\n===================\")\n        fig, axes = plt.subplots(2,2, figsize = (16,16))\n        axes = axes.flatten()\n        local_set = [local_views[0][idx], local_views[1][idx], local_views[2][idx], local_views[3][idx]] \n\n        for k in range(4):\n            axes[k].imshow(ops.cast(ops.squeeze(local_set[k]), \"uint8\"))\n        plt.show()","metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-05-07T08:07:06.979994Z","iopub.execute_input":"2024-05-07T08:07:06.980335Z","iopub.status.idle":"2024-05-07T08:07:06.991889Z","shell.execute_reply.started":"2024-05-07T08:07:06.980312Z","shell.execute_reply":"2024-05-07T08:07:06.990987Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"# SSL experiment : Information-Maximization","metadata":{}},{"cell_type":"markdown","source":"> Model Save and Attention map visualize callbacks","metadata":{}},{"cell_type":"code","source":"class ModelSaveCallback(keras.callbacks.Callback):\n    def __init__(self, exp_name, **kwargs):\n        super().__init__(**kwargs)\n        self.exp_name = exp_name\n    def on_epoch_end(self, epoch, logs=None):\n        save_dir = \"/kaggle/working/\" ; target_dir = '/kaggle/working/model_save'\n        os.makedirs(target_dir, exist_ok = True)\n        if (epoch % 1 == 0):\n            try:\n                print(\"\\nModel Saving to local notebook...\")\n                file_name = f\"{self.exp_name}_{self.model.name}_keras_v3_Epoch{epoch}.keras\"\n                filepath = os.path.join(target_dir, file_name)\n                saved_dir = self.model.save(filepath, overwrite=True)\n                if (epoch+1) % 5 == 0:\n                    print(\"\\nModel Uploading to NAS...\")\n                    upload_file(file_name, filepath)\n                    print(\"\\nModel Saved to Local NAS\")\n            except Exception as e: \n                print('Model Saving Error:\\n', e)\n    def on_train_batch_end(self, batch, logs=None):\n        save_dir = \"/kaggle/working/\" ; target_dir = '/kaggle/working/model_save'\n        os.makedirs(target_dir, exist_ok = True)\n        if (batch % 5000 == 0) and (batch != 0): \n            try:\n                print(\"\\nModel Saving to local notebook...\")\n                file_name = f\"{self.exp_name}_{self.model.name}_keras_v3_Batch{batch}.keras\"\n                filepath = os.path.join(target_dir, file_name)\n                saved_dir = self.model.save(filepath, overwrite=True)\n                if (batch % 10000 == 0):\n                    print(\"\\nModel Uploading to NAS...\")\n                    upload_file(file_name, filepath)\n                    print(\"\\nModel Saved to Local NAS\")\n            except Exception as e: \n                print('Model Saving Error:\\n', e)\n                \n                \nclass TrainingViz(keras.callbacks.Callback):\n    def __init__(self, run):\n        super().__init__()\n        self.run = run\n    def on_epoch_end(self, epoch, logs=None):\n        configs = self.model.get_config() ; method = configs[\"SSL_method\"]\n        if method in [\"CLIP\" , \"SigLIP\", \"SPARC\"]:\n            feature_extractor = self.model\n        else:\n            feature_extractor = self.model.feature_extractor\n        viz_weights = ssl_module.att_visualize(feature_extractor, sample_img, res,\n                                              thresholding = True)\n        viz_weights = np.array(viz_weights) #batch, heads, res, res, 3\n        heads = viz_weights.shape[1]\n        origin = [\"Original Image\"]\n        col = [f\"Head{idx + 1}\" for idx in range(heads)]\n        col = origin + col\n        \n        visualize_data = []\n        for idx, weights in enumerate(viz_weights):\n            origin_img = [wandb.Image(sample_img[idx])]\n            tmp = [wandb.Image(weights[idx]) for idx in range(heads)]\n            tmp = origin_img + tmp\n            visualize_data.append(tmp)\n            del tmp, origin_img\n        tbl = wandb.Table(columns = col, data = visualize_data)\n        wandb.log({f\"Epoch{epoch+1}_{method}_result\": tbl})\n        del feature_extractor, tbl\n        tf.keras.backend.clear_session()\n        \n        \n    def on_train_batch_end(self, batch, logs=None):\n        if (batch % 3000 == 0) and (batch != 0): \n            configs = self.model.get_config() ; method = configs[\"SSL_method\"]\n            if method in [\"CLIP\" , \"SigLIP\", \"SPARC\"]:\n                feature_extractor = self.model\n            else:\n                feature_extractor = self.model.feature_extractor\n            viz_weights = ssl_module.att_visualize(feature_extractor, sample_img, res,\n                                                  thresholding = True)\n            viz_weights = np.array(viz_weights) #batch, heads, res, res, 3\n            heads = viz_weights.shape[1]\n            origin = [\"Original Image\"]\n            col = [f\"Head{idx + 1}\" for idx in range(heads)]\n            col = origin + col\n            visualize_data = []\n            for idx, weights in enumerate(viz_weights):\n                origin_img = [wandb.Image(sample_img[idx])]\n                tmp = [wandb.Image(weights[idx]) for idx in range(heads)]\n                tmp = origin_img + tmp\n                visualize_data.append(tmp)\n                del tmp, origin_img\n            tbl = wandb.Table(columns = col, data = visualize_data)\n            wandb.log({f\"Batch{batch+1}_{method}_result\": tbl})\n            del feature_extractor, tbl\n            tf.keras.backend.clear_session()\n           \n        else:\n            pass","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:06.993273Z","iopub.execute_input":"2024-05-07T08:07:06.993616Z","iopub.status.idle":"2024-05-07T08:07:07.017441Z","shell.execute_reply.started":"2024-05-07T08:07:06.993585Z","shell.execute_reply":"2024-05-07T08:07:07.016474Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"> Training/logging helper function","metadata":{}},{"cell_type":"code","source":"def run_exp(model, train_ds = train_ds, val_ds = val_ds, epochs = 10, note= None):\n    try:\n        wandb.finish()\n    except:\n        pass\n    \n    if True :\n        wandb_config()\n        configs = model.get_config()\n        method = configs[\"SSL_method\"]\n        if method in ['CLIP', \"SigLIP\", \"SPARC\"]:\n            _ = model((example_images[:2], example_reports[:2]))\n            feature_extractor_flops = get_flops(model.image_encoder, [example_images[:1]])\n        else:\n            _ = model(test_set)\n            feature_extractor_flops = get_flops(model.feature_extractor, [sample_img[:1]])\n        env_config = {\"batch_size\" : batch_size, \"original resolution\" : res, \"local view resolution\" : small_res,\n                     \"Training steps\" : train_steps,\n                     \"Val steps\" : val_steps,\n                     \"train cases\" : (train_1 + train_2),\n                     \"val cases\" : (val_1 + val_2),\n                     \"embed_dims\" : embed_dims,\n                     \"Image resolution\" : res,\n                     \"(Image) Encoder Flops(G)\" : feature_extractor_flops,\n                     \"dtype\" : keras.mixed_precision.dtype_policy(),\n                      \"Optimizer configs\" : model.optimizer.get_config(),\n                      \"Multicrop N\" : n_multicrop,\n                     }\n        configs.update(env_config)\n        \n        wd = \"/kaggle/working/\"\n        file_name = os.path.join(wd, f\"{method}_GrandCXR_mini.keras\")\n        print(configs, \"\\n\\n\")\n        model.summary()\n        run = wandb.init(project=\"FusionFocus\", \n                         entity=\"gongbungkim\", config = configs, notes = note)\n\n        pass_error = keras.callbacks.TerminateOnNaN()\n        wb_callback = WandbMetricsLogger(log_freq = 100)\n        \n        callbacks = [pass_error, wb_callback, ModelSaveCallback(f\"FF_SSL_{method}\"), \n                     TrainingViz(run)]\n        if val_ds is not None:\n            hist = model.fit(train_ds, \n                             steps_per_epoch = train_steps, \n                             epochs = epochs, \n                             validation_data = val_ds, \n                             validation_steps = val_steps, \n                             verbose = 1,\n                             callbacks = callbacks)\n        else:\n            hist = model.fit(train_ds, \n                         steps_per_epoch = train_steps, \n                         epochs = epochs, \n                         verbose = 1,\n                         callbacks = callbacks)\n    return hist","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:07.018532Z","iopub.execute_input":"2024-05-07T08:07:07.018858Z","iopub.status.idle":"2024-05-07T08:07:07.032208Z","shell.execute_reply.started":"2024-05-07T08:07:07.018835Z","shell.execute_reply":"2024-05-07T08:07:07.031206Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"> Feature extractor setting\n- General-Context Vision Transformer,\n- Convolution-based models:\n    - EfficientNetV2B0, Small\n    - ConvNeXtTiny, Small","metadata":{}},{"cell_type":"code","source":"gc_xxtiny_configs = get_gcvit_configs(res, 64, \"GC_ViT_xxtiny\")\ngc_xxtiny_configs[\"level_depth\"] = [1,1,1,2]\n\ngc_tiny_configs = get_gcvit_configs(res, 64, \"GC_ViT_tiny\")\ngc_tiny_configs[\"level_depth\"] = [1,1,2,4]\n\ngc_small_configs = get_gcvit_configs(res, 64, \"GC_ViT_small\")\ngc_small_configs[\"level_depth\"] = [1,2,4,6]","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:07.033322Z","iopub.execute_input":"2024-05-07T08:07:07.033736Z","iopub.status.idle":"2024-05-07T08:07:07.044184Z","shell.execute_reply.started":"2024-05-07T08:07:07.033691Z","shell.execute_reply":"2024-05-07T08:07:07.043423Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"- Setting Final Feature Extractors","metadata":{}},{"cell_type":"code","source":"gcvit_xxtiny = get_full_model(gc_xxtiny_configs, res = res, pe_type = None, att_depth = 1, embed_dims = embed_dims)\ngcvit_tiny = get_full_model(gc_tiny_configs, res = res, pe_type = None, att_depth = 1, embed_dims = embed_dims)\ngcvit_small = get_full_model(gc_small_configs, res = res, pe_type = None, att_depth = 1, embed_dims = embed_dims)\n###############\neff_tiny = get_full_model(\"effnet\", res = res, pe_type = 'learnable', att_depth = 1, embed_dims = embed_dims)\neff_small = get_full_model(\"effnet_small\", res = res, pe_type = 'learnable', att_depth = 1, embed_dims = embed_dims)\n\nconv_tiny = get_full_model(\"convnext\", res = res, pe_type = 'learnable', att_depth = 1, embed_dims = embed_dims)\nconv_small = get_full_model(\"convnext_small\", res = res, pe_type = 'learnable', att_depth = 1, embed_dims = embed_dims)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:07.045096Z","iopub.execute_input":"2024-05-07T08:07:07.045371Z","iopub.status.idle":"2024-05-07T08:07:38.285065Z","shell.execute_reply.started":"2024-05-07T08:07:07.045349Z","shell.execute_reply":"2024-05-07T08:07:38.284086Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/efficientnet_v2/efficientnetv2-b1_notop.h5\n\u001b[1m28456008/28456008\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\nDownloading data from https://storage.googleapis.com/tensorflow/keras-applications/efficientnet_v2/efficientnetv2-s_notop.h5\n\u001b[1m82420632/82420632\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 0us/step\nDownloading data from https://storage.googleapis.com/tensorflow/keras-applications/convnext/convnext_tiny_notop.h5\n\u001b[1m111650432/111650432\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 0us/step\nDownloading data from https://storage.googleapis.com/tensorflow/keras-applications/convnext/convnext_small_notop.h5\n\u001b[1m198551472/198551472\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","output_type":"stream"}]},{"cell_type":"markdown","source":"> learning rate setting","metadata":{}},{"cell_type":"code","source":"cosine_decay = keras.optimizers.schedules.CosineDecayRestarts(2e-4, train_steps, \n                                                              t_mul=1.0, m_mul=0.75)\ncosine_decay_high_lr = keras.optimizers.schedules.CosineDecayRestarts(2e-3, train_steps, \n                                                                      t_mul=1.0, m_mul=0.5)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:38.286371Z","iopub.execute_input":"2024-05-07T08:07:38.287009Z","iopub.status.idle":"2024-05-07T08:07:38.292594Z","shell.execute_reply.started":"2024-05-07T08:07:38.286975Z","shell.execute_reply":"2024-05-07T08:07:38.291458Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# Barlow Twins","metadata":{}},{"cell_type":"code","source":"barlow_trainer = BarlowModel(eff_tiny, \n                             embed_dims = embed_dims, multiview = True)\nbarlow_trainer.compile(optimizer = keras.optimizers.AdamW(learning_rate = cosine_decay,\n                                                         clipvalue = 1.0,\n                                                         #amsgrad = True\n                                                         )\n                      )\nrun_exp(barlow_trainer, train_ds_multiview, None, epochs = 100,\n       note = \"Without validation d/t lack of resources\")","metadata":{"execution":{"iopub.status.busy":"2024-05-07T08:07:38.293753Z","iopub.execute_input":"2024-05-07T08:07:38.294016Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n{'feature_extractor_name': 'efficientnetv2-b1_depth1_dims768_heads8', 'embed_dims': 768, 'Multiview(>2)': True, 'diag_part_coefficient': 0.6, 'off_diag_coefficient': 0.4, 'SSL_method': 'Barlow_Twins', 'Linear Probe': False, 'N_Categories': 0, 'Probe Activation': 'NA', 'batch_size': 16, 'original resolution': 256, 'local view resolution': 64, 'Training steps': 5725, 'Val steps': 191, 'train cases': 91614, 'val cases': 3064, 'Image resolution': 256, '(Image) Encoder Flops(G)': 3.121111434, 'dtype': <FloatDTypePolicy \"float32\">, 'Optimizer configs': {'name': 'adamw', 'learning_rate': {'module': 'keras.optimizers.schedules', 'class_name': 'CosineDecayRestarts', 'config': {'initial_learning_rate': 0.0002, 'first_decay_steps': 5725, 't_mul': 1.0, 'm_mul': 0.75, 'alpha': 0.0, 'name': 'SGDRDecay'}, 'registered_name': None}, 'weight_decay': 0.004, 'clipnorm': None, 'global_clipnorm': None, 'clipvalue': 1.0, 'use_ema': False, 'ema_momentum': 0.99, 'ema_overwrite_frequency': None, 'loss_scale_factor': None, 'gradient_accumulation_steps': None, 'beta_1': 0.9, 'beta_2': 0.999, 'epsilon': 1e-07, 'amsgrad': False}, 'Multicrop N': 4} \n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"barlow_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"barlow_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ efficientnetv2-b1_depth1_dims7… │ ?                      │    \u001b[38;5;34m10,324,148\u001b[0m │\n│ (\u001b[38;5;33mFunctional\u001b[0m)                    │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential_52 (\u001b[38;5;33mSequential\u001b[0m)      │ ?                      │     \u001b[38;5;34m1,771,776\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential_53 (\u001b[38;5;33mSequential\u001b[0m)      │ ?                      │     \u001b[38;5;34m1,771,776\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ efficientnetv2-b1_depth1_dims7… │ ?                      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">10,324,148</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)                    │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential_52 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)      │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,771,776</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential_53 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)      │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,771,776</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m13,867,700\u001b[0m (52.90 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13,867,700</span> (52.90 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m13,796,628\u001b[0m (52.63 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13,796,628</span> (52.63 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m71,072\u001b[0m (277.62 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">71,072</span> (277.62 KB)\n</pre>\n"},"metadata":{}},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mgongbungkim\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.16.6"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240507_080757-e7pb5o3n</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/gongbungkim/FusionFocus/runs/e7pb5o3n' target=\"_blank\">fragrant-valley-30</a></strong> to <a href='https://wandb.ai/gongbungkim/FusionFocus' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/gongbungkim/FusionFocus' target=\"_blank\">https://wandb.ai/gongbungkim/FusionFocus</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/gongbungkim/FusionFocus/runs/e7pb5o3n' target=\"_blank\">https://wandb.ai/gongbungkim/FusionFocus/runs/e7pb5o3n</a>"},"metadata":{}},{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1715069537.493107     133 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1715069537.804064     133 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[32m\u001b[41mERROR\u001b[0m Unable to log learning rate.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m3000/5725\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m45:15\u001b[0m 996ms/step - ssl_loss: 0.0938Using Raw model with Att pooling \n Possible error: \n 'Functional' object has no attribute 'get_full_model'\n\u001b[1m3109/5725\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m43:38\u001b[0m 1s/step - ssl_loss: 0.0933","output_type":"stream"},{"text":"IOPub message rate exceeded.\nThe notebook server will temporarily stop sending output\nto the client in order to avoid crashing it.\nTo change this limit, set the config variable\n`--NotebookApp.iopub_msg_rate_limit`.\n\nCurrent values:\nNotebookApp.iopub_msg_rate_limit=1000.0 (msgs/sec)\nNotebookApp.rate_limit_window=3.0 (secs)\n\n","name":"stderr","output_type":"stream"},{"name":"stdout","text":"\u001b[1m5000/5725\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m12:09\u001b[0m 1s/step - ssl_loss: 0.0879\nModel Saving to local notebook...\n\u001b[1m5725/5725\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 992ms/step - ssl_loss: 0.0865\nModel Saving to local notebook...\nUsing Raw model with Att pooling \n Possible error: \n 'Functional' object has no attribute 'get_full_model'\n\u001b[1m5725/5725\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5929s\u001b[0m 993ms/step - ssl_loss: 0.0865 - Barlow_loss_tracker: 0.0762 - loss: 0.0000e+00\nEpoch 2/100\n\u001b[1m3000/5725\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m40:48\u001b[0m 899ms/step - ssl_loss: 0.0774Using Raw model with Att pooling \n Possible error: \n 'Functional' object has no attribute 'get_full_model'\n\u001b[1m3163/5725\u001b[0m \u001b[32m━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━\u001b[0m \u001b[1m38:29\u001b[0m 901ms/step - ssl_loss: 0.0773","output_type":"stream"}]},{"cell_type":"markdown","source":"# VICReg","metadata":{}},{"cell_type":"code","source":"vic_trainer = VICRegModel(eff_tiny, \n                             embed_dims = embed_dims, multiview = True)\nvic_trainer.compile(optimizer = keras.optimizers.AdamW(learning_rate = cosine_decay,\n                                                         clipvalue = 1.0,\n                                                         #amsgrad = True\n                                                         )\n                      )\nrun_exp(vic_trainer, train_ds_multiview, None, epochs = 100,\n       note = \"Without validation d/t lack of resources\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}